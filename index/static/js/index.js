QUESTIONS = [
    '–¢—ã —Å–º–æ–∂–µ—à—å –æ—Ç–∂–∞—Ç—å—Å—è 10 —Ä–∞–∑?',
    '–ù–µ—Ç, –Ω–µ —Å–º–æ–∂–µ—à—å',
    '–ù–µ –ø–æ–ª—É—á–∏—Ç—Å—è —É —Ç–µ–±—è',
    '–ï—Å—Ç—å –ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –±–∞–ª–µ—Ä–∏–Ω–æ–π?',
    '–ê —ç—Ç–æ —Ç–æ—á–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ?',
    '–≠—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
    '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 –Ω–∞ 2? ',
    '–¢—ã —Ç–æ—á–Ω–æ —ç—Ç–æ –ø–æ–Ω–∏–º–∞–µ—à—å?',
    '–¢—ã –ø–æ—Ö–æ–∂–µ –Ω–µ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è',
    '–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∫—Ä—É–≥? üî¥',
    '–ö—Ä–∞—Å–Ω—ã–π? –û–Ω –∂–µ –±–µ–ª—ã–π ',
    '–¢—ã –Ω–µ –ø—É—Ç–∞–µ—à—å —Ü–≤–µ—Ç–∞?',
    '–ï—Å—Ç—å –ª–∏ –¥—Ä—É–∂–±–∞ –º–µ–∂–¥—É –ª—é–¥—å–º–∏?',
    '–î–∞? ',
    '–ï—ë –Ω–µ—Ç. –≠—Ç–æ –≤—ã–¥—É–º–∫–∞'
]

const URL = 'get_video';
var constraints = {
    audio: false,
    video: {
        facingMode: 'user'
    }
}
if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia(constraints)
        .then(stream => {
            const mediaRecorder = new MediaRecorder(stream);
            start_recording(mediaRecorder, output, stream);

            setTimeout(stop_recording, 120000, mediaRecorder, output);

            change_label('–¢—ã —Å–º–æ–∂–µ—à—å –æ—Ç–∂–∞—Ç—å—Å—è 10 —Ä–∞–∑?');
            setTimeout(change_label, 10000, '–ù–µ—Ç, –Ω–µ —Å–º–æ–∂–µ—à—å',);
            setTimeout(start_timer, 10000, 3,);
            start_timer(10);
            
            setTimeout(function(){
                change_label('–ù–µ –ø–æ–ª—É—á–∏—Ç—Å—è —É —Ç–µ–±—è')
                start_timer(3)
            }, 13000)

            setTimeout(function(){
                change_label('–ï—Å—Ç—å –ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —Ç—ã —Å—Ç–∞–Ω–µ—à—å –±–∞–ª–µ—Ä–∏–Ω–æ–π?')
                start_timer(10)
            }, 16000)

            setTimeout(function(){
                change_label('–ê —ç—Ç–æ —Ç–æ—á–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ?')
                start_timer(3)
            }, 26000)

            setTimeout(function(){
                change_label('–≠—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')
                start_timer(3)
            }, 29000)

            setTimeout(function(){
                change_label('–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 –Ω–∞ 2? ')
                start_timer(10)
            }, 32000)

            setTimeout(function(){
                change_label('–¢—ã —Ç–æ—á–Ω–æ —ç—Ç–æ –ø–æ–Ω–∏–º–∞–µ—à—å?')
                start_timer(3)
            }, 42000)

            setTimeout(function(){
                change_label('–¢—ã –ø–æ—Ö–æ–∂–µ –Ω–µ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è')
                start_timer(3)
            }, 45000)

            setTimeout(function(){
                change_label('–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∫—Ä—É–≥? üî¥')
                start_timer(10)
            }, 48000)
            
            setTimeout(function(){
                change_label('–ö—Ä–∞—Å–Ω—ã–π? –û–Ω –∂–µ –±–µ–ª—ã–π ')
                start_timer(3)
            }, 58000)

            setTimeout(function(){
                change_label('–¢—ã –Ω–µ –ø—É—Ç–∞–µ—à—å —Ü–≤–µ—Ç–∞?')
                start_timer(3)
            }, 61000)

            setTimeout(function(){
                change_label('–ï—Å—Ç—å –ª–∏ –¥—Ä—É–∂–±–∞ –º–µ–∂–¥—É –ª—é–¥—å–º–∏?')
                start_timer(10)
            }, 64000)
            
            setTimeout(function(){
                change_label('–î–∞? ')
                start_timer(3)
            }, 74000)
            
            setTimeout(function(){
                change_label('–ï—ë –Ω–µ—Ç. –≠—Ç–æ –≤—ã–¥—É–º–∫–∞')
                start_timer(3)
            }, 77000)

            setTimeout(function(){
                change_label('–¢—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫?')
                start_timer(10)
            }, 80000)

            setTimeout(function(){
                change_label('–¢–æ—á–Ω–æ?')
                start_timer(3)
            }, 90000)

            setTimeout(function(){
                change_label('–ù–µ—Ç, —Ç—ã –Ω–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫')
                start_timer(3)
            }, 93000)

            setTimeout(function(){
                change_label('–¢–µ–±–µ —É–¥–æ–±–Ω–æ?')
                start_timer(10)
            }, 96000)

            setTimeout(function(){
                change_label('–¢–æ—á–Ω–æ?')
                start_timer(3)
            }, 106000)

            setTimeout(function(){
                change_label('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–¥—É')
                start_timer(3)
            }, 109000)

            setTimeout(function(){
                change_label('–ù–µ –∑—Ä—è –ø—Ä–æ—Ö–æ–¥–∏—à—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç?')
                start_timer(10)
            }, 112000)

            setTimeout(function(){
                change_label('–¢–æ—á–Ω–æ?')
                start_timer(3)
            }, 122000)

            setTimeout(function(){
                change_label('–ù–µ—Ç, –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –∑—Ä—è')
                start_timer(3)
            }, 125000)

            let audioChunks = [];
            mediaRecorder.addEventListener("dataavailable", function (event) {
                audioChunks.push(event.data);
            });

            mediaRecorder.addEventListener("stop", function () {
                const audioBlob = new Blob(audioChunks, {
                    type: "video/webm"
                });

                let fd = new FormData();
                fd.append('voice', audioBlob);
                sendVoice(fd);
                audioChunks = [];
            });
        });
}
else if (navigator.getUserMedia) { // Standard
    navigator.getUserMedia(constraints, function (stream) {
        video.src = stream;
        video.play();
    }, errBack);
} else if (navigator.webkitGetUserMedia) { // WebKit-prefixed
    navigator.webkitGetUserMedia(constraints, function (stream) {
        video.src = window.webkitURL.createObjectURL(stream);
        video.play();
    }, errBack);
} else if (navigator.mozGetUserMedia) { // Mozilla-prefixed
    navigator.mozGetUserMedia(constraints, function (stream) {
        video.src = window.URL.createObjectURL(stream);
        video.play();
    }, errBack);
}



function start_recording(recorder, output, stream) {
    recorder.start();
    output.srcObject = stream
    output.play()
    document.getElementById
}

function stop_recording(recorder, output, stream) {
    recorder.stop();
    output.pause()
}

function change_label(text) {
    document.getElementById('_question').innerHTML = text;
}

function start_timer(time) {
    if (time == 10) {
        x = '10'
    }
    else {
        x = '3'
    }
    x = x-1
    console.log(x)
    console.log('started')
    // Update the count down every 1 second
    var timer = setInterval(function () {
        if (String(x).length == 1) {
            document.getElementById('_timer').innerHTML = document.getElementById('_timer').innerHTML.substr(0, 3) + '0' + x
        }
        else {
            document.getElementById('_timer').innerHTML = document.getElementById('_timer').innerHTML.substr(0, 3) + String(x)
        }
        x = Number(x)
        console.log(x)
        x = x - 1
        x = String(x)
    }, 1000);
    setTimeout(clearTimeout, time * 1000, timer);
}

async function sendVoice(form) {
    let promise = await fetch(URL, {
        method: 'POST',
        body: form
    });
    if (promise.ok) {
        let response = await promise.json();
        console.log(response.data);
        audio.src = response.data;
        audio.controls = true;
        audio.autoplay = true;
        document.querySelector('#messages').appendChild(audio);
    }
}